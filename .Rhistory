source("/mnt/tigrlab/scratch/jcyu/SPINS_SPASD/brainhack-2022-scrubbing/scripts/plot_DistFC.R")
plot_DistFC(FC_matrix = FC_matrix,
Dist_matrix = distance,
color.line = "red", lwd.line = 2)
isSymmetric.matrix(distance)
if (!isSymmetric.matrix(round(Dist_matrix), 7)
warning("Dist_matrix is not symmetric. The upper triangle was used to plot.")
source("/mnt/tigrlab/scratch/jcyu/SPINS_SPASD/brainhack-2022-scrubbing/scripts/plot_DistFC.R")
plot_DistFC(FC_matrix = FC_matrix,
Dist_matrix = distance,
color.line = "red", lwd.line = 2)
isSymmetric.matrix(round(Dist_matrix, 7))
isSymmetric.matrix(round(distance, 7))
distance
round(distance, 7)
t(distance)[upper.tri(t(distance))] <- distance[upper.tri(distance)] <- abs(rnorm(45, 1, 1))
distance[lower.tri(distance)] <- t(distance)[upper.tri(distance)]
distance
distance[lower.tri(distance), byrow = FALSE] <- distance[upper.tri(distance)] <- abs(rnorm(45, 1, 1))
distance[lower.tri(distance), drop = TRUE] <- distance[upper.tri(distance)] <- abs(rnorm(45, 1, 1))
distance[lower.tri(distance)] <- t(distance)[upper.tri(t(distance))] <- abs(rnorm(45, 1, 1))
distance <- diag(0, 10)
distance[upper.tri(distance)] <- abs(rnorm(45, 1, 1))
distance  = distance + t(distance)
distance
source("/mnt/tigrlab/scratch/jcyu/SPINS_SPASD/brainhack-2022-scrubbing/scripts/plot_DistFC.R")
source("/mnt/tigrlab/scratch/jcyu/SPINS_SPASD/brainhack-2022-scrubbing/scripts/plot_DistFC.R")
source("../scripts/plot_DistFC.R")
plot_DistFC(FC_matrix = FC_matrix,
Dist_matrix = distance,
color.line = "red", lwd.line = 2)
data2plot %>%
ggplot(aes(x = Dist_vec, y = FC_vec)) +
geom_point() +
geom_smooth(se = FALSE, color = "red", lwd = 2) +
geom_hline(yintercept = 0) +
title(paste0("Correlation = ", cor(Dist_vec, FC_vec))) +
xlab("Distance") +
ylab("FC") +
theme(panel.grid = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
data2plot %>%
ggplot(aes(x = Dist_vec, y = FC_vec)) +
geom_point() +
geom_smooth(se = FALSE, color = "red", lwd = 2) +
geom_hline(yintercept = 0) +
ggtitle(paste0("Correlation = ", cor(Dist_vec, FC_vec))) +
xlab("Distance") +
ylab("FC") +
theme(panel.grid = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
data2plot %>%
ggplot(aes(x = Dist_vec, y = FC_vec)) +
geom_point() +
geom_smooth(se = FALSE, color = "red", lwd = 2) +
geom_hline(yintercept = 0) +
ggtitle(paste0("Correlation = ", round(cor(Dist_vec, FC_vec), 2))) +
xlab("Distance") +
ylab("FC") +
theme(panel.grid = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
data2plot %>%
ggplot(aes(x = Dist_vec, y = FC_vec)) +
geom_point() +
geom_smooth(se = FALSE, color = "red", lwd = 2) +
geom_hline(yintercept = 0) +
ggtitle(paste0("r = ", round(cor(Dist_vec, FC_vec), 2))) +
xlab("Distance") +
ylab("FC") +
theme(panel.grid = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
source("/mnt/tigrlab/scratch/jcyu/SPINS_SPASD/brainhack-2022-scrubbing/scripts/plot_DistFC.R")
plot_DistFC(FC_matrix = FC_matrix,
Dist_matrix = distance,
color.line = "red", lwd.line = 2)
source("/mnt/tigrlab/scratch/jcyu/SPINS_SPASD/brainhack-2022-scrubbing/scripts/plot_DistFC.R")
plot_DistFC(FC_matrix = FC_matrix,
Dist_matrix = distance,
color.line = "red", lwd.line = 2,
title = "FD threshold = x, scrubs = z")
source("/mnt/tigrlab/scratch/jcyu/SPINS_SPASD/brainhack-2022-scrubbing/scripts/plot_DistFC.R")
source("/mnt/tigrlab/scratch/jcyu/SPINS_SPASD/brainhack-2022-scrubbing/scripts/plot_DistFC.R")
plot_DistFC(FC_matrix = FC_matrix,
Dist_matrix = distance,
color.line = "red", lwd.line = 2,
title = "FD threshold = x, scrubs = z")
plot_DistFC(FC_matrix = FC_matrix,
Dist_matrix = distance,
color.line = "red", lwd.line = 2,
title = "FD threshold = 00, scrubs = 00")
set.seed(2022)
timeseries <- matrix(rnorm(10000), nrow = 100)
FC_matrix <- cor(timeseries)
distance <- diag(0, 100)
distance[upper.tri(distance)] <- abs(rnorm(45, 1, 1))
distance  = distance + t(distance)
distance
dim(FC_matrix)
timeseries <- matrix(rnorm(10000), nrow = 1000)
FC_matrix <- cor(timeseries)
dim(FC_matrix)
timeseries <- matrix(rnorm(10000), nrow = 100)
FC_matrix <- cor(timeseries)
FC_matrix %>% din
FC_matrix %>% dim
dim(timeseries)
timeseries <- matrix(rnorm(100000), nrow = 100)
FC_matrix <- cor(timeseries)
dim(FC_matrix)
distance <- diag(0, 1000)
distance %>% dim
1000*999/2
set.seed(2022)
timeseries <- matrix(rnorm(100000), nrow = 100)
FC_matrix <- cor(timeseries)
distance <- diag(0, dim.mat)
dim.mat <- dim(FC_matrix)[1]
distance <- diag(0, dim.mat)
distance[upper.tri(distance)] <- abs(rnorm(dim.mat*(dim.mat-1)/2, 1, 1))
distance  = distance + t(distance)
data2plot <- data.frame(FC_vec = FC_matrix[upper.tri(FC_matrix)],
Dist_vec = distance[upper.tri(distance)])
source("../scripts/plot_DistFC.R")
plot_DistFC(FC_matrix = FC_matrix,
Dist_matrix = distance,
color.line = "red", lwd.line = 2,
title = "FD threshold = 00, scrubs = 00")
source("/mnt/tigrlab/scratch/jcyu/SPINS_SPASD/brainhack-2022-scrubbing/scripts/plot_DistFC.R")
plot_DistFC(FC_matrix = FC_matrix,
Dist_matrix = distance,
color.line = "red", lwd.line = 2,
title = "FD threshold = 00, scrubs = 00")
timeseries <- matrix(rnorm(1000), nrow = 100)
FC_matrix <- cor(timeseries)
dim.mat <- dim(FC_matrix)[1]
distance <- diag(0, dim.mat)
distance[upper.tri(distance)] <- abs(rnorm(dim.mat*(dim.mat-1)/2, 1, 1))
distance  = distance + t(distance)
plot_DistFC(FC_matrix = FC_matrix,
Dist_matrix = distance,
color.line = "red", lwd.line = 2,
title = "FD threshold = 00, scrubs = 00")
timeseries <- matrix(rnorm(10000), nrow = 100)
FC_matrix <- cor(timeseries)
dim.mat <- dim(FC_matrix)[1]
distance <- diag(0, dim.mat)
distance[upper.tri(distance)] <- abs(rnorm(dim.mat*(dim.mat-1)/2, 1, 1))
distance  = distance + t(distance)
plot_DistFC(FC_matrix = FC_matrix,
Dist_matrix = distance,
color.line = "red", lwd.line = 2,
title = "FD threshold = 00, scrubs = 00")
plot_DistFC(FC_matrix = FC_matrix,
Dist_matrix = distance,
color.line = "red", lwd.line = 2,
title = "FD threshold = w, scrubs = v")
source("/mnt/tigrlab/scratch/jcyu/SPINS_SPASD/brainhack-2022-scrubbing/scripts/plot_DistFC.R")
source("/mnt/tigrlab/scratch/jcyu/SPINS_SPASD/brainhack-2022-scrubbing/scripts/plot_DistFC.R")
?plot_DistFC
## This is how you source the function
source("../scripts/plot_DistFC.R")
? plot_DistFC
## and plot the results
plot_DistFC(FC_matrix = FC_matrix,
Dist_matrix = distance,
color.line = "red", lwd.line = 2,
title = "FD threshold = w, scrubs = v")
set.seed(2022)
timeseries <- matrix(rnorm(10000), nrow = 100)
FC_matrix <- cor(timeseries)
dim.mat <- dim(FC_matrix)[1]
distance <- diag(0, dim.mat)
distance[upper.tri(distance)] <- abs(rnorm(dim.mat*(dim.mat-1)/2, 1, 1))
distance  = distance + t(distance)
data2plot <- data.frame(FC_vec = FC_matrix[upper.tri(FC_matrix)],
Dist_vec = distance[upper.tri(distance)])
data2plot %>%
ggplot(aes(x = Dist_vec, y = FC_vec)) +
geom_point() +
geom_smooth(se = FALSE, color = "red", lwd = 2) +
geom_hline(yintercept = 0) +
ggtitle(paste0("r = ", round(cor(Dist_vec, FC_vec), 2))) +
xlab("Distance") +
ylab("FC") +
theme(panel.grid = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
data2plot
data2plot %>%
ggplot(aes(x = Dist_vec, y = FC_vec)) +
geom_point() +
geom_smooth(se = FALSE, color = "red", lwd = 2) +
geom_hline(yintercept = 0) +
ggtitle(paste0("r = ", round(cor(Dist_vec, FC_vec), 2))) +
xlab("Distance") +
ylab("FC") +
theme(panel.grid = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
is.data.frame(data2plot)
```{r}
data2plot <- data.frame(FC_vec = FC_matrix[upper.tri(FC_matrix)],
Dist_vec = distance[upper.tri(distance)])
data2plot %>%
ggplot(aes(x = Dist_vec, y = FC_vec)) +
geom_point() +
geom_smooth(se = FALSE, color = "red", lwd = 2) +
geom_hline(yintercept = 0) +
ggtitle(paste0("r = ", round(cor(Dist_vec, FC_vec), 2))) +
xlab("Distance") +
ylab("FC") +
theme(panel.grid = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
data2plot %>%
ggplot(data2plot, aes(x = Dist_vec, y = FC_vec)) +
geom_point() +
geom_smooth(se = FALSE, color = "red", lwd = 2) +
geom_hline(yintercept = 0) +
ggtitle(paste0("r = ", round(cor(Dist_vec, FC_vec), 2))) +
xlab("Distance") +
ylab("FC") +
theme(panel.grid = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
ggplot(data2plot, aes(x = Dist_vec, y = FC_vec)) +
geom_point() +
geom_smooth(se = FALSE, color = "red", lwd = 2) +
geom_hline(yintercept = 0) +
ggtitle(paste0("r = ", round(cor(Dist_vec, FC_vec), 2))) +
xlab("Distance") +
ylab("FC") +
theme(panel.grid = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
data2plot$FC_vec
ggplot(data2plot, aes(x = Dist_vec, y = FC_vec)) +
geom_point() +
geom_smooth(se = FALSE, color = "red", lwd = 2) +
geom_hline(yintercept = 0) +
ggtitle(paste0("r = ", round(cor(Dist_vec, FC_vec), 2))) +
xlab("Distance") +
ylab("FC") +
theme(panel.grid = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
data2plot %>%
ggplot(aes(x = Dist, y = FC)) +
geom_point() +
geom_smooth(se = FALSE, color = "red", lwd = 2) +
geom_hline(yintercept = 0) +
ggtitle(paste0("r = ", round(cor(Dist, FC), 2))) +
xlab("Distance") +
ylab("FC") +
theme(panel.grid = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
data2plot %>%
ggplot(aes(x = Dist_vec, y = FC_vec)) +
geom_point() +
geom_smooth(se = FALSE, color = "red", lwd = 2) +
geom_hline(yintercept = 0) +
ggtitle(paste0("r = ", round(cor(data2plot$Dist_vec, data2plot$FC_vec), 2))) +
xlab("Distance") +
ylab("FC") +
theme(panel.grid = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
## and plot the results
plot_DistFC(FC_matrix = FC_matrix,
Dist_matrix = distance,
color.line = "red", lwd.line = 2,
title = "FD threshold = w, scrubs = v") + ggtitle()
## This is how you source the function
source("../scripts/plot_DistFC.R")
## and plot the results
plot_DistFC(FC_matrix = FC_matrix,
Dist_matrix = distance,
color.line = "red", lwd.line = 2,
title = "FD threshold = w, scrubs = v") + ggtitle()
## and plot the results
plot_DistFC(FC_matrix = FC_matrix,
Dist_matrix = distance,
color.line = "red", lwd.line = 2,
title = "FD threshold = w, scrubs = v")
## and plot the results
plot_DistFC(FC_matrix = FC_matrix,
Dist_matrix = distance,
color.line = "red", lwd.line = 2,
title = "FD threshold = w, scrubs = v") +
theme(title = element_blank())
heatmap(FC_matrix)
heatmap(FC_matrix)
heatmap(FC_matrix, Rowv = NA, Colv = NA)
heatmap(distance, Rowv = NA, Colv = NA)
heatmap(distance, Rowv = NA, Colv = NA)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
Dist_matrix <- list()
FC_matrix <- list()
## sub 1
set.seed(2022)
timeseries <- matrix(rnorm(10000), nrow = 100)
FC_matrix[['sub1']] <- cor(timeseries)
dim.mat <- dim(FC_matrix)[1]
distance <- diag(0, dim.mat)
Dist_matrix <- list()
FC_matrix <- list()
## sub 1
set.seed(2022)
timeseries <- matrix(rnorm(10000), nrow = 100)
FC_matrix[['sub1']] <- cor(timeseries)
dim.mat <- dim(FC_matrix[['sub1']])[1]
distance <- diag(0, dim.mat)
distance[upper.tri(distance)] <- abs(rnorm(dim.mat*(dim.mat-1)/2, 1, 1))
Dist_matrix[['sub1']]  = distance + t(distance)
## sub 2
set.seed(2023)
timeseries <- matrix(rnorm(10000), nrow = 100)
FC_matrix[['sub2']] <- cor(timeseries)
dim.mat <- dim(FC_matrix[['sub2']])[1]
distance <- diag(0, dim.mat)
distance[upper.tri(distance)] <- abs(rnorm(dim.mat*(dim.mat-1)/2, 1, 1))
Dist_matrix[['sub2']]  = distance + t(distance)
heatmap(FC_matrix[['sub1']], Rowv = NA, Colv = NA, main = "FC_matrix (subj1)", xlab = "ROIs", ylab = "ROIs")
heatmap(distance[['sub1']], Rowv = NA, Colv = NA, main = "distance (subj1)", xlab = "ROIs", ylab = "ROIs")
heatmap(FC_matrix[['sub1']], Rowv = NA, Colv = NA, main = "FC_matrix (subj1)", xlab = "ROIs", ylab = "ROIs")
heatmap(Dist_matrix[['sub1']], Rowv = NA, Colv = NA, main = "distance (subj1)", xlab = "ROIs", ylab = "ROIs")
heatmap(FC_matrix[['sub1']], Rowv = NA, Colv = NA, main = "FC_matrix (subj1)", xlab = "ROIs", ylab = "ROIs")
heatmap(Dist_matrix[['sub1']], Rowv = NA, Colv = NA, main = "Dist_matrix (subj1)", xlab = "ROIs", ylab = "ROIs")
lapply(FC_matrix, as.vector)
Distlist.in.vec <- lapply(Fist_matrix, as.vector)
Distlist.in.vec <- lapply(Dist_matrix, as.vector)
unlist(FClist.in.vec)
FClist.in.vec <- lapply(FC_matrix, as.vector)
unlist(FClist.in.vec)
unlist(FClist.in.vec, simplify = TRUE)
unlist(FClist.in.vec, drop = TRUE)
data2plot <- data.frame(FC_vec = unlist(FClist.in.vec),
Dist_vec = unlist(Distlist.in.vec))
data2plot %>%
ggplot(aes(x = Dist_vec, y = FC_vec)) +
geom_point() +
geom_smooth(se = FALSE, color = "red", lwd = 2) +
geom_hline(yintercept = 0) +
ggtitle(paste0("r = ", round(cor(data2plot$Dist_vec, data2plot$FC_vec), 2))) +
xlab("Distance") +
ylab("FC") +
theme(panel.grid = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
lapply(FC_matrix)
lapply(FC_matrix, dim)
lapply(FC_matrix, dim, simplify = TRUE)
lapply(FC_matrix, dim, simple = TRUE)
?lapply
lapply(FC_matrix, dim) %>% ulist
lapply(FC_matrix, dim) %>% unlist
lapply(FC_matrix, dim) %>% unlist %>% matrix(ncol = 2)
lapply(FC_matrix, dim) %>% unlist %>% matrix(ncol = 2, byrow = TRUE)
FC_list <- FC_matrix
Dist_list <- Dist_matrix
## Check dimension
dim.FC <- matrix(unlist(lapply(FC_list, dim)), ncol = 2, byrow = TRUE)
dim.Dist <- matrix(unlist(lapply(Dist_list, dim)), ncol = 2, byrow = TRUE)
dim.FC
dim.Dist
## Check dimension
dim.FC <- lapply(FC_list, dim)
dim.Dist <- lapply(Dist_list, dim)
lapply(dim.FC, unique)
### Get dimensions for each matrix
dimu.FC <- lapply(dim.FC, unique)
dimu.Dist <- lapply(dim.Dist.unique)
### Get dimensions for each matrix
dimu.FC <- lapply(dim.FC, unique)
dimu.Dist <- lapply(dim.Dist, unique)
length(dim.FC)
lapply(dim.FC, length)
lapply(dimu.FC, length)
lapply(dimu.FC, length) > 1
sum(lapply(dimu.FC, length) > 1)
### Get dimensions for each matrix
dim2check.FC <- lapply(lapply(dim.FC, unique), length) > 1
dim2check.Dist <- lapply(lapply(dim.Dist, unique), length) > 1
dim2check.FC
isTRUE(dim2check.FC)
isTRUE(c("FALSE", "TRUE"))
isTRUE(c(FALSE, TRUE))
sum(dim2check.FC)
dim2check.FC[dim2check.FC == TRUE]
dim2check.FC[dim2check.FC == FALSE]
names(dim2check.FC[dim2check.FC == FALSE])
message("FC_list needs to have square matrices. Please check the FC matrix below.")
print(dim2check.FC.show)
dim2check.FC.show <- dim2check.FC[dim2check.FC == TRUE]
print(dim2check.FC.show)
dim2check.FC
dim.FC
dim.FC == dim.Dist
dim.FC %in% dim.Dist
dim.FC !%in% dim.Dist
sum(!(dim.FC %in% dim.Dist))
length(dim.FC) != length(dim.Dist)
lapply(FC_list, isSymmetric.matrix)
sum(lapply(FC_list, isSymmetric.matrix))
sum(dim2check.FC) > 0
dim2check.FC
lapply(FC_list, isSymmetric.matrix) == 0
sum(lapply(FC_list, isSymmetric.matrix) == 0) > 0
## Check dimension
dim.FC <- lapply(FC_list, dim)
dim.Dist <- lapply(Dist_list, dim)
### Get dimensions for each matrix
dim2check.FC <- lapply(lapply(dim.FC, unique), length) > 1
dim2check.Dist <- lapply(lapply(dim.Dist, unique), length) > 1
### If the inputs are square matrices
if (sum(dim2check.FC) > 0 | sum(dim2check.Dist) > 0){
if (sum(dim2check.FC) > 0)
dim2check.FC.show <- dim2check.FC[dim2check.FC == TRUE]
message("FC_list needs to have square matrices. Please check the FC matrix below.")
print(dim2check.FC.show)
if (sum(dim2check.Dist) > 0)
dim2check.Dist.show <- dim2check.Dist[dim2check.Dist == TRUE]
message("Dist_list needs to be a square matrix. Please check the Dist matrices listed below.")
print(dim2check.Dist.show)
stop("Error: Dimension mismatch.")
}
if (sum(!(dim.FC %in% dim.Dist)) > 0){
dimComp.show <- dim.FC %in% dim.Dist
message("The dimensions of FC matrices do not match the dimensions of Dist matrices.")
print(dimComp.show)
stop("Error: Dimension mismatch.")
}
if (length(dim.FC) != length(dim.Dist)){
stop("FC_list and Dist_list need to include the same number of matrices.")
}
if (sum(lapply(FC_list, isSymmetric.matrix) == 0) > 0)
warning("Some matrices in your FC_list are not symmetric. The upper triangle was used to plot.")
if (sum(lapply(Dist_list, isSymmetric.matrix) == 0) > 0)
warning("Some matrices in your Dist_list are not symmetric. The upper triangle was used to plot.")
## Organize data
FClist.in.vec <- lapply(FC_list, as.vector)
Distlist.in.vec <- lapply(Dist_list, as.vector)
data2plot <- data.frame(FC_vec = unlist(FClist.in.vec),
Dist_vec = unlist(Distlist.in.vec))
## plot
data2plot %>%
ggplot(aes(x = Dist_vec, y = FC_vec)) +
geom_point() +
geom_smooth(se = FALSE, color = color.line, size = lwd.line) +
geom_hline(yintercept = 0) +
ggtitle(paste0(title, "\nr = ", round(cor(data2plot$Dist_vec, data2plot$FC_vec), 2))) +
xlab("Distance") +
ylab("FC") +
theme(panel.grid = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
color.line = "red"
lwd.line = 2
title = NA
## plot
data2plot %>%
ggplot(aes(x = Dist_vec, y = FC_vec)) +
geom_point() +
geom_smooth(se = FALSE, color = color.line, size = lwd.line) +
geom_hline(yintercept = 0) +
ggtitle(paste0(title, "\nr = ", round(cor(data2plot$Dist_vec, data2plot$FC_vec), 2))) +
xlab("Distance") +
ylab("FC") +
theme(panel.grid = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
data2plot %>%
ggplot(aes(x = Dist_vec, y = FC_vec)) +
geom_point() +
geom_smooth(se = FALSE, color = "red", lwd = 2) +
geom_hline(yintercept = 0) +
ggtitle(paste0("r = ", round(cor(data2plot$Dist_vec, data2plot$FC_vec), 2))) +
xlab("Distance") +
ylab("FC") +
theme(panel.grid = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
## This is how you source the function
source("../scripts/plot_DistFC.R")
## and plot the results
plot_DistFC(FC_list = FC_matrix,
Dist_list = Dist_matrix,
color.line = "red", lwd.line = 2,
title = "FD threshold = w, scrubs = v")
